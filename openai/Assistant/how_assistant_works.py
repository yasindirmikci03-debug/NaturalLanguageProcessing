######      How assistant works
# Assistants can call OpenAI’s models with specific instructions to tune their personality and capabilities.
# Assistants can access multiple tools in parallel. These can be both OpenAI-hosted tools — like code_interpreter and file_search — or tools you build / host (via function calling).
# Assistants can access persistent Threads. Threads simplify AI application development by storing message history and truncating it when the conversation gets too long for the model’s context length. You create a Thread once, and simply append Messages to it as your users reply.
# Assistants can access files in several formats — either as part of their creation or as part of Threads between Assistants and users. When using tools, Assistants can also create files (e.g., images, spreadsheets, etc) and cite files they reference in the Messages they create.


# Creating Assistans

from openai import OpenAI

client = OpenAI()

file = client.files.create(
    file = open("revenue-forecast.csv","rb"),
    purpose = "assistants"
)

assistant = client.beta.assistants.create(
    name = "Data visualizer",
    description = "You are great at creating beautiful data visualizations. You analyze data present in .csv files, understand trends, and come up with data visualizations relevant to those trends. You also share a brief text summary of the trends observed. ",
    model = "gpt-4-turbo",
    tools = [{"type" : "code_interpreter"}],
    tool_resources = {
        "code_interpreter" : {
            "file_ids" : [file.id]
        }
    }
)

# Managing Threads and Messages 

thread = client.beta.threads.create(
    messages = [
        {
            "role" : "user","content" : "Create 3 data visualizations based on the trends in this file.",
            "attachments" : [
                {
                    "file_id" : file.id,
                    "tools" : [{"type" : "code_interpreter"}]
                }
            ]
        }
    ]
)

# Message annotations

# Messages created by Assistants may contain annotations within the content array of the object. Annotations provide information around how you should annotate the text in the Message.

# There are two types of Annotations:

# file_citation: File citations are created by the file_search tool and define references to a specific file that was uploaded and used by the Assistant to generate the response.
# file_path: File path annotations are created by the code_interpreter tool and contain references to the files generated by the tool.

# Retrieve the message object

message = client.beta.threads.messages.retrieve(
    thread_id = "...",
    message_id = "..."
)

# Extract the message content 
message_content = message.content[0].text
annotations = message.content.annotations
citations = []

# Iterate over the annotations and add footnotes
for index, annotation in enumerate(annotations):
    # Replace the text with a footnote
    message_content.value = message_content.value.replace(annotation.text, f' [{index}]')

    # Gather citations based on annotation attributes
    if (file_citation := getattr(annotation, 'file_citation', None)):
        cited_file = client.files.retrieve(file_citation.file_id)
        citations.append(f' [{index}] {file_citation.quote} from {cited_file.filename}')
    elif (file_path := getattr(annotation,'file_path',None)):
        cited_file = client.files.retrieve(file_path.file_id)
        citations.append(f'[{index}] Click <here> to download {cited_file.filename}')

# Add footnotes to the end of the message before displaying to user
message_content.value += '\n' + "\n".join(citations)

# Runs and run steps

run = client.beta.threads.runs.create(
    thread_id = thread.id,
    assistant_id = assistant.id,
    model = "gpt-4-turbo",
    instructions = "New instructions that override the Assistant instructions.",
    tools = [{"type" : "code_interpreter"}, {"type" : "file_search"}]
)

